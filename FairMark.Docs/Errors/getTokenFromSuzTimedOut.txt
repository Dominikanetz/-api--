Message: FairMark.FairMarkException : SuzServiceProxy#getTokenFromSuz(String,Long,String,boolean) timed-out and no fallback available.

----------------

// Authenticate
-> GET https://demo.lp.crpt.tech/api/v3/auth/cert/key
headers: {
  X-ApiMethodName = Authenticate
  Accept = application/json, text/json, text/x-json, text/javascript, application/xml, text/xml
}

<- OK 200 (OK) https://demo.lp.crpt.tech/api/v3/auth/cert/key
timings: {
  started: 2021-04-13 00:20:06
  elapsed: 0:00:00.156
}
headers: {
  Transfer-Encoding = chunked
  Connection = keep-alive
  Vary = Accept-Encoding
  Content-Encoding =
  Content-Type = application/json;charset=UTF-8
  Date = Mon, 12 Apr 2021 21:20:06 GMT
  Set-Cookie = JSESSIONID=E9E5CF2DE015D1A0F892CE69466B43A6; Path=/; HttpOnly
  Server = nginx
}
body: {
  "uuid": "90c00ce5-5048-4c7a-9c94-710e6852ae86",
  "data": "GYXVNEGAXACWJGFFTBGKQEZBSBHJUO"
}

// GetToken
-> POST https://demo.lp.crpt.tech/api/v3/auth/cert/6242a186-970c-4260-9bd9-b8f19ed66d4d
headers: {
  X-ApiMethodName = GetToken
  Accept = application/json, text/json, text/x-json, text/javascript, application/xml, text/xml
  Content-type = application/json
}
body: {
  "uuid": "90c00ce5-5048-4c7a-9c94-710e6852ae86",
  "data": "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"
}

<- ERROR 500 (InternalServerError) https://demo.lp.crpt.tech/api/v3/auth/cert/6242a186-970c-4260-9bd9-b8f19ed66d4d
timings: {
  started: 2021-04-13 00:20:12
  elapsed: 0:00:30.563
}
headers: {
  Connection = keep-alive
  Content-Length = 6288
  Content-Type = application/json;charset=UTF-8
  Date = Mon, 12 Apr 2021 21:20:43 GMT
  Set-Cookie = JSESSIONID=8A63FF184A316A5E8A48A3A8CB20A9A1; Path=/; HttpOnly
  Server = nginx
}
body: {
  "code": 500,
  "description": "com.netflix.hystrix.exception.HystrixRuntimeException: SuzServiceProxy#getTokenFromSuz(String,Long,String,boolean) timed-out and no fallback available.\n\tat com.netflix.hystrix.AbstractCommand$22.call(AbstractCommand.java:819)\n\tat com.netflix.hystrix.AbstractCommand$22.call(AbstractCommand.java:804)\n\tat rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:140)\n\tat rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)\n\tat rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)\n\tat com.netflix.hystrix.AbstractCommand$DeprecatedOnFallbackHookApplication$1.onError(AbstractCommand.java:1472)\n\tat com.netflix.hystrix.AbstractCommand$FallbackHookApplication$1.onError(AbstractCommand.java:1397)\n\tat rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)\n\tat rx.observers.Subscribers$5.onError(Subscribers.java:230)\n\tat rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:44)\n\tat rx.internal.operators.OnSubscribeThrow.call(OnSubscribeThrow.java:28)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:86)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:52)\n\tat rx.Observable.unsafeSubscribe(Observable.java:10151)\n\tat rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)\n\tat rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:86)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:52)\n\tat rx.Observable.unsafeSubscribe(Observable.java:10151)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:86)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:52)\n\tat rx.Observable.unsafeSubscribe(Observable.java:10151)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:86)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:52)\n\tat rx.Observable.unsafeSubscribe(Observable.java:10151)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:86)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:52)\n\tat rx.Observable.unsafeSubscribe(Observable.java:10151)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)\n\tat rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)\n\tat rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:86)\n\tat io.opentracing.rxjava.TracingRxJavaUtils$2$1.call(TracingRxJavaUtils.java:52)\n\tat rx.Observable.unsafeSubscribe(Observable.java:10151)\n\tat rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:142)\n\tat rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)\n\tat rx.internal.operators.OnSubscribeDoOnEach$DoOnEachSubscriber.onError(OnSubscribeDoOnEach.java:87)\n\tat com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$1$1.run(AbstractCommand.java:1154)\n\tat com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable$1.call(HystrixContextRunnable.java:45)\n\tat com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable$1.call(HystrixContextRunnable.java:41)\n\tat org.springframework.security.concurrent.DelegatingSecurityContextCallable.call(DelegatingSecurityContextCallable.java:87)\n\tat ru.crpt.sc.common.config.MdcContextHystrixConcurrencyStrategy$HystrixMdcContextWrapper.call(MdcContextHystrixConcurrencyStrategy.java:89)\n\tat com.netflix.hystrix.strategy.concurrency.HystrixContextRunnable.run(HystrixContextRunnable.java:61)\n\tat com.netflix.hystrix.AbstractCommand$HystrixObservableTimeoutOperator$1.tick(AbstractCommand.java:1159)\n\tat com.netflix.hystrix.util.HystrixTimer$1.run(HystrixTimer.java:99)\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\n\tat java.base/java.util.concurrent.FutureTask.runAndReset(Unknown Source)\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n\tat java.base/java.lang.Thread.run(Unknown Source)\nCaused by: java.util.concurrent.TimeoutException\n\tat com.netflix.hystrix.AbstractCommand.handleTimeoutViaFallback(AbstractCommand.java:997)\n\tat com.netflix.hystrix.AbstractCommand.access$500(AbstractCommand.java:60)\n\tat com.netflix.hystrix.AbstractCommand$12.call(AbstractCommand.java:610)\n\tat com.netflix.hystrix.AbstractCommand$12.call(AbstractCommand.java:601)\n\tat rx.internal.operators.OperatorOnErrorResumeNextViaFunction$4.onError(OperatorOnErrorResumeNextViaFunction.java:140)\n\t... 16 more\n",
  "error_message": "SuzServiceProxy#getTokenFromSuz(String,Long,String,boolean) timed-out and no fallback available."
}
