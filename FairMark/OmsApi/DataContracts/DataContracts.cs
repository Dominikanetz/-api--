//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace DataContracts
{
    using System = global::System;
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationInfo 
    {
        /// <summary>Aggregation unit (Единица агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AggregationUnit AggregationUnit { get; set; } = new AggregationUnit();
    
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParticipantId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productsInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductInfo> ProductsInfo { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoBeer 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoLight 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoLp 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoMilk 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoNcp 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Наименование бренда продукции</summary>
        [Newtonsoft.Json.JsonProperty("brandcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brandcode { get; set; }
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
        /// <summary>Production date (Дата производства)</summary>
        [Newtonsoft.Json.JsonProperty("productionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionDate { get; set; }
    
        /// <summary>Production Line ID (Идентификатор производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>Идентификатор производственного заказа</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoOtp 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
        /// <summary>Production Line ID (Идентификатор производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoPerfum 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoPhoto 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoShoes 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoTobacco 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
        /// <summary>Production date (Дата производства)</summary>
        [Newtonsoft.Json.JsonProperty("productionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionDate { get; set; }
    
        /// <summary>Production line number (Номер производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>The Id of the production order (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationReportDtoWater 
    {
        /// <summary>Array of aggregation unit (Массив единиц агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnits", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AggregationUnit> AggregationUnits { get; set; } = new System.Collections.ObjectModel.Collection<AggregationUnit>();
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AggregationUnit 
    {
        /// <summary>Number of goods actually aggregated in the unit (Фактически упаковано)</summary>
        [Newtonsoft.Json.JsonProperty("aggregatedItemsCount", Required = Newtonsoft.Json.Required.Always)]
        public int AggregatedItemsCount { get; set; }
    
        /// <summary>Aggregation operation type (Тип агрегации)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AggregationUnitAggregationType AggregationType { get; set; }
    
        /// <summary>Aggregation Unit Capacity (Емкость упаковки)</summary>
        [Newtonsoft.Json.JsonProperty("aggregationUnitCapacity", Required = Newtonsoft.Json.Required.Always)]
        public int AggregationUnitCapacity { get; set; }
    
        /// <summary>List of the Aggregated Identification Codes (Список агрегированных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Identification Code of Aggregation Unit (КМ агрегата)</summary>
        [Newtonsoft.Json.JsonProperty("unitSerialNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string UnitSerialNumber { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AppVersion 
    {
        /// <summary>OMS API Version (Версия API СУЗ)</summary>
        [Newtonsoft.Json.JsonProperty("apiVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApiVersion { get; set; }
    
        /// <summary>OMS Version (Версия СУЗ)</summary>
        [Newtonsoft.Json.JsonProperty("omsVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OmsVersion { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BlockDto 
    {
        /// <summary>Date, time of creation of the marking code package(Дата, время создания пакета кодов маркировки)</summary>
        [Newtonsoft.Json.JsonProperty("blockDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BlockDateTime { get; set; }
    
        /// <summary>Unique identifier of a business order for issuing MC (Уникальный идентификатор бизнес-заказа на эмиссию КМ)</summary>
        [Newtonsoft.Json.JsonProperty("blockId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlockId { get; set; }
    
        /// <summary>Количество КМ/СИ</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BlocksDto 
    {
        [Newtonsoft.Json.JsonProperty("blocks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BlockDto> Blocks { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
        /// <summary>Unique identifier of a business order for issuing MC (Уникальный идентификатор бизнес-заказа на эмиссию КМ)</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BufferInfo 
    {
        /// <summary>Number of available codes in buffer and pools (Общее кол-во доступных КМ для товара в буфере и пулах регистратора)</summary>
        [Newtonsoft.Json.JsonProperty("availableCodes", Required = Newtonsoft.Json.Required.Always)]
        public int AvailableCodes { get; set; }
    
        /// <summary>Buffer status (Статус буфера)</summary>
        [Newtonsoft.Json.JsonProperty("bufferStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BufferInfoBufferStatus BufferStatus { get; set; }
    
        /// <summary>Codes expired date in millis since epoch (Дата истечения срока годности КМ в Unix time. Равна нулю если срок годности не ограничен.)</summary>
        [Newtonsoft.Json.JsonProperty("expiredDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ExpiredDate { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Number of unused ICs in the array (Остаток КМ в буфере СУЗ)</summary>
        [Newtonsoft.Json.JsonProperty("leftInBuffer", Required = Newtonsoft.Json.Required.Always)]
        public int LeftInBuffer { get; set; }
    
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
        /// <summary>A unique order ID in OMS (Уникальный идентификатор заказа на эмиссию КМ)</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }
    
        /// <summary>Array of pools created for the IC buffer (Массив пулов, созданных для буфера)</summary>
        [Newtonsoft.Json.JsonProperty("poolInfos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PoolInfo> PoolInfos { get; set; }
    
        /// <summary>ER pools was exhausted (Закончились КМ в пулах РЭ)</summary>
        [Newtonsoft.Json.JsonProperty("poolsExhausted", Required = Newtonsoft.Json.Required.Always)]
        public bool PoolsExhausted { get; set; }
    
        /// <summary>Buffer rejection reason (Причина отклонения буфера СУЗ-ом)</summary>
        [Newtonsoft.Json.JsonProperty("rejectionReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectionReason { get; set; }
    
        /// <summary>Order quantity of IC in the order (Общее кол-во заказанных КМ для товара)</summary>
        [Newtonsoft.Json.JsonProperty("totalCodes", Required = Newtonsoft.Json.Required.Always)]
        public int TotalCodes { get; set; }
    
        /// <summary>Buffer total passed codes (Суммарное кол-во КМ полученных из буфера)</summary>
        [Newtonsoft.Json.JsonProperty("totalPassed", Required = Newtonsoft.Json.Required.Always)]
        public int TotalPassed { get; set; }
    
        /// <summary>Number of unavailable codes (Общее кол-во недоступных КМ для товара в связи с техническими причинами)</summary>
        [Newtonsoft.Json.JsonProperty("unavailableCodes", Required = Newtonsoft.Json.Required.Always)]
        public int UnavailableCodes { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CodesDto 
    {
        /// <summary>Identifier of code block (Идентификатор блока кодов)</summary>
        [Newtonsoft.Json.JsonProperty("blockId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlockId { get; set; }
    
        /// <summary>Identification Codes (Список КМ)</summary>
        [Newtonsoft.Json.JsonProperty("codes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Codes { get; set; }
    
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DropoutReportDtoBeer 
    {
        /// <summary>Dropout reason (Причина выбытия)</summary>
        [Newtonsoft.Json.JsonProperty("dropoutReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DropoutReportDtoBeerDropoutReason DropoutReason { get; set; }
    
        /// <summary>Identification Codes that were dropped out (Информация о выбывших КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DropoutReportDtoMilk 
    {
        /// <summary>Dropout reason (Причина выбытия)</summary>
        [Newtonsoft.Json.JsonProperty("dropoutReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DropoutReportDtoMilkDropoutReason DropoutReason { get; set; }
    
        /// <summary>Identification Codes that were dropped out (Информация о выбывших КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DropoutReportDtoNcp 
    {
        /// <summary>Address where the write-off was made (Адрес, где было произведено списание)</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }
    
        /// <summary>Dropout reason (Причина выбытия)</summary>
        [Newtonsoft.Json.JsonProperty("dropoutReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DropoutReportDtoNcpDropoutReason DropoutReason { get; set; }
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
        /// <summary>Production Line Number (Идентификатор производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionLineId { get; set; }
    
        /// <summary>The Id of the production order (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Identification Codes that were dropped out (Информация о выбывших КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Dropout document date (Дата документа)</summary>
        [Newtonsoft.Json.JsonProperty("sourceDocDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceDocDate { get; set; }
    
        /// <summary>Dropout document number (Идентификатор документа, на основании которого осуществляется списание)</summary>
        [Newtonsoft.Json.JsonProperty("sourceDocNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceDocNum { get; set; }
    
        /// <summary>Specifies whether to write off all nested items (Признак списания всех вложенных элементов)</summary>
        [Newtonsoft.Json.JsonProperty("withChild", Required = Newtonsoft.Json.Required.Always)]
        public bool WithChild { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DropoutReportDtoTobacco 
    {
        /// <summary>Address where the write-off was made (Адрес, где было произведено списание)</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Address { get; set; }
    
        /// <summary>Dropout reason (Причина выбытия)</summary>
        [Newtonsoft.Json.JsonProperty("dropoutReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DropoutReportDtoTobaccoDropoutReason DropoutReason { get; set; }
    
        /// <summary>Taxpayer Identification Number (Идентификационный номер налогоплательщика)</summary>
        [Newtonsoft.Json.JsonProperty("participantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ParticipantId { get; set; }
    
        /// <summary>Production Line Number (Идентификатор производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionLineId { get; set; }
    
        /// <summary>The Id of the production order (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Identification Codes that were dropped out (Информация о выбывших КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Dropout document date (Дата первичного документа)</summary>
        [Newtonsoft.Json.JsonProperty("sourceDocDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceDocDate { get; set; }
    
        /// <summary>Dropout document number (Номер первичного документа)</summary>
        [Newtonsoft.Json.JsonProperty("sourceDocNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceDocNum { get; set; }
    
        /// <summary>Specifies whether to write off all nested items (Признак списания всех вложенных элементов)</summary>
        [Newtonsoft.Json.JsonProperty("withChild", Required = Newtonsoft.Json.Required.Always)]
        public bool WithChild { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DropoutReportDtoWater 
    {
        /// <summary>Dropout reason (Причина выбытия)</summary>
        [Newtonsoft.Json.JsonProperty("dropoutReason", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DropoutReportDtoWaterDropoutReason DropoutReason { get; set; }
    
        /// <summary>Identification Codes that were dropped out (Информация о выбывших КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OMSIdentifier 
    {
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OmsApiFieldError 
    {
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldError", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldError { get; set; }
    
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OmsApiGlobalError 
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ErrorCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OmsRestResult 
    {
        [Newtonsoft.Json.JsonProperty("fieldErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OmsApiFieldError> FieldErrors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("globalErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OmsApiGlobalError> GlobalErrors { get; set; }
    
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoBeer 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoBeerCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductBeer> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductBeer>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoBeerReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoBicycle 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoBicycleCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductBicycle> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductBicycle>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoBicycleReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoLight 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoLightCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductFashion> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductFashion>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoLightReleaseMethodType ReleaseMethodType { get; set; }
    
        /// <summary>Признак того, что товар произведен/приобретен до даты запрета оборота немаркированных товаров по данной ТГ</summary>
        [Newtonsoft.Json.JsonProperty("remainsAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemainsAvailable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoLp 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoLpCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductFashion> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductFashion>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoLpReleaseMethodType ReleaseMethodType { get; set; }
    
        /// <summary>Признак того, что товар произведен/приобретен до даты запрета оборота немаркированных товаров по данной ТГ</summary>
        [Newtonsoft.Json.JsonProperty("remainsAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemainsAvailable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoMilk 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoMilkCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductMilk> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductMilk>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoMilkReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoNcp 
    {
        /// <summary>Expected Start Date (Дата начала производства продукции по данному заказу)</summary>
        [Newtonsoft.Json.JsonProperty("expectedStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedStartDate { get; set; }
    
        /// <summary>Factory Address (Адрес производства)</summary>
        [Newtonsoft.Json.JsonProperty("factoryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FactoryAddress { get; set; }
    
        /// <summary>Factory Country (Страна производителя)</summary>
        [Newtonsoft.Json.JsonProperty("factoryCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FactoryCountry { get; set; }
    
        /// <summary>Factory Identifier (GLN) Идентификатор производства. (Глобальный номер места нахождения)</summary>
        [Newtonsoft.Json.JsonProperty("factoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FactoryId { get; set; }
    
        /// <summary>Factory Name (Наименование производства)</summary>
        [Newtonsoft.Json.JsonProperty("factoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FactoryName { get; set; }
    
        /// <summary>PO Number (Номер производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("poNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoNumber { get; set; }
    
        /// <summary>Product Code SKU (Код продукта)</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductCode { get; set; }
    
        /// <summary>Product Description (Описание продукта)</summary>
        [Newtonsoft.Json.JsonProperty("productDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductDescription { get; set; }
    
        /// <summary>Line Identifier (Идентификатор производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductNcp> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductNcp>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoNcpReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoOtp 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoOtpCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Start date for the production of this order (Дата начала производства продукции по данному заказу)</summary>
        [Newtonsoft.Json.JsonProperty("expectedStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedStartDate { get; set; }
    
        /// <summary>Manufacturer's address (Адрес производства)</summary>
        [Newtonsoft.Json.JsonProperty("factoryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FactoryAddress { get; set; }
    
        /// <summary>Country of origin (Страна производителя)</summary>
        [Newtonsoft.Json.JsonProperty("factoryCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FactoryCountry { get; set; }
    
        /// <summary>Production identifier (Global Location Number) (Идентификатор производства (Глобальный номер места нахождения))</summary>
        [Newtonsoft.Json.JsonProperty("factoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FactoryId { get; set; }
    
        /// <summary>Name of production (Наименование производства)</summary>
        [Newtonsoft.Json.JsonProperty("factoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FactoryName { get; set; }
    
        /// <summary>Production order number (Номер производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("poNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoNumber { get; set; }
    
        /// <summary>Product code (SKU) (Код продукта (SKU))</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductCode { get; set; }
    
        /// <summary>Product description (Описание продукта)</summary>
        [Newtonsoft.Json.JsonProperty("productDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductDescription { get; set; }
    
        /// <summary>Production line identifier (Идентификатор производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductOtp> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductOtp>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoOtpReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoPerfum 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoPerfumCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductPerfum> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductPerfum>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoPerfumReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoPharma 
    {
        /// <summary>Is code emission free (Признак оплаты эмиссии КМ: true - не подлежит оплате, false - подлежит оплате (значение по умолчанию)</summary>
        [Newtonsoft.Json.JsonProperty("freeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FreeCode { get; set; }
    
        /// <summary>Payment Type (Тип оплаты: 1 - Оплата по эмиссии, 2 - Оплата по нанесению (значение по умолчанию)</summary>
        [Newtonsoft.Json.JsonProperty("paymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OrderDtoPharmaPaymentType? PaymentType { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductPharma> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductPharma>();
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
        /// <summary>Subject ID (Субъект обращения)</summary>
        [Newtonsoft.Json.JsonProperty("subjectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubjectId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoPhoto 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoPhotoCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductPhoto> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductPhoto>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoPhotoReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoShoes 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoShoesCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductFashion> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductFashion>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoShoesReleaseMethodType ReleaseMethodType { get; set; }
    
        /// <summary>Признак того, что товар произведен/приобретен до даты запрета оборота немаркированных товаров по данной ТГ</summary>
        [Newtonsoft.Json.JsonProperty("remainsAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RemainsAvailable { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoTires 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoTiresCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductTires> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductTires>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoTiresReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoTobacco 
    {
        /// <summary>Expected Start Date (Ожидаемая дата начала)</summary>
        [Newtonsoft.Json.JsonProperty("expectedStartDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpectedStartDate { get; set; }
    
        /// <summary>Factory Address (Адрес производства)</summary>
        [Newtonsoft.Json.JsonProperty("factoryAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FactoryAddress { get; set; }
    
        /// <summary>Factory Country (Страна производителя)</summary>
        [Newtonsoft.Json.JsonProperty("factoryCountry", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FactoryCountry { get; set; }
    
        /// <summary>Factory Identifier (GLN) Идентификатор производства. (Глобальный номер места нахождения)</summary>
        [Newtonsoft.Json.JsonProperty("factoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FactoryId { get; set; }
    
        /// <summary>Factory Name (Наименование производства)</summary>
        [Newtonsoft.Json.JsonProperty("factoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FactoryName { get; set; }
    
        /// <summary>PO Number (Номер заказа)</summary>
        [Newtonsoft.Json.JsonProperty("poNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PoNumber { get; set; }
    
        /// <summary>Product Code (Код продукта)</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductCode { get; set; }
    
        /// <summary>Product Description (Описание продукта)</summary>
        [Newtonsoft.Json.JsonProperty("productDescription", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductDescription { get; set; }
    
        /// <summary>Line Identifier (Идентификатор производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductTobacco> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductTobacco>();
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoWater 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoWaterCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductWater> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductWater>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoWaterReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderDtoWheelchairs 
    {
        /// <summary>Contact Person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Marking Manufacturing Type (Способ изготовления)</summary>
        [Newtonsoft.Json.JsonProperty("createMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoWheelchairsCreateMethodType CreateMethodType { get; set; }
    
        /// <summary>Production Order ID (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>Product list (Список товаров)</summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderProductWheelchairs> Products { get; set; } = new System.Collections.ObjectModel.Collection<OrderProductWheelchairs>();
    
        /// <summary>Product Release Type (Способ выпуска товаров в оборот)</summary>
        [Newtonsoft.Json.JsonProperty("releaseMethodType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderDtoWheelchairsReleaseMethodType ReleaseMethodType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServiceProviderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductBeer 
    {
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductBeerCisType? CisType { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductBeerSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductBicycle 
    {
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductBicycleSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductFashion 
    {
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductFashionCisType? CisType { get; set; }
    
        /// <summary>ИНН/УНБ (или аналог) экспортера</summary>
        [Newtonsoft.Json.JsonProperty("exporterTaxpayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExporterTaxpayerId { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductFashionSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductMilk 
    {
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductMilkCisType? CisType { get; set; }
    
        /// <summary>Expiry date of the product (expiration date more than 72 hours) (Дата окончания срока годности продукции (срок хранения более 72 часов))</summary>
        [Newtonsoft.Json.JsonProperty("expDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpDate { get; set; }
    
        /// <summary>Expiration date of the product (shelf life less than 72 hours) Дата окончания срока годности продукции (срок хранения менее 72 часов))</summary>
        [Newtonsoft.Json.JsonProperty("expDate72", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpDate72 { get; set; }
    
        /// <summary>ИНН/УНБ (или аналог) экспортера</summary>
        [Newtonsoft.Json.JsonProperty("exporterTaxpayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExporterTaxpayerId { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductMilkSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductNcp 
    {
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductNcpSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductOtp 
    {
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductOtpCisType? CisType { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Maximum retail price (Максимальная розничная цена)</summary>
        [Newtonsoft.Json.JsonProperty("mrp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mrp { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductOtpSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductPerfum 
    {
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductPerfumCisType? CisType { get; set; }
    
        /// <summary>ИНН/УНБ (или аналог) экспортера</summary>
        [Newtonsoft.Json.JsonProperty("exporterTaxpayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExporterTaxpayerId { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductPerfumSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductPharma 
    {
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductPharmaSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductPhoto 
    {
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductPhotoCisType? CisType { get; set; }
    
        /// <summary>ИНН/УНБ (или аналог) экспортера</summary>
        [Newtonsoft.Json.JsonProperty("exporterTaxpayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExporterTaxpayerId { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductPhotoSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductTires 
    {
        /// <summary>ИНН/УНБ (или аналог) экспортера</summary>
        [Newtonsoft.Json.JsonProperty("exporterTaxpayerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExporterTaxpayerId { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductTiresSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductTobacco 
    {
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Maximum retail price (Максимальная розничная цена)</summary>
        [Newtonsoft.Json.JsonProperty("mrp", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mrp { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductTobaccoSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductWater 
    {
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductWaterCisType? CisType { get; set; }
    
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductWaterSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderProductWheelchairs 
    {
        /// <summary>Product GTIN (GTIN товара)</summary>
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Gtin { get; set; }
    
        /// <summary>Requested Identification Code quantity [Required only if serialNumberType = OPERATOR] (Количество КМ [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 150000)]
        public int Quantity { get; set; }
    
        /// <summary>Serial number source type (Способ формирования индивидуального серийного номера)</summary>
        [Newtonsoft.Json.JsonProperty("serialNumberType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderProductWheelchairsSerialNumberType SerialNumberType { get; set; }
    
        /// <summary>Serial numbers [Required only if serialNumberType = SELF_MADE] (Список серийных номеров [Обязателен, если serialNumberType = SELF_MADE])</summary>
        [Newtonsoft.Json.JsonProperty("serialNumbers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> SerialNumbers { get; set; }
    
        /// <summary>Идентификатор этикетки</summary>
        [Newtonsoft.Json.JsonProperty("stickerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StickerId { get; set; }
    
        /// <summary>Identification Code Template ID (Идентификатор шаблона КМ)</summary>
        [Newtonsoft.Json.JsonProperty("templateId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 22)]
        public int TemplateId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderResult 
    {
        /// <summary>Time of planned order execution in ms (Время планируемого выполнения заказа в мс)</summary>
        [Newtonsoft.Json.JsonProperty("expectedCompleteTimestamp", Required = Newtonsoft.Json.Required.Always)]
        public long ExpectedCompleteTimestamp { get; set; }
    
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
        /// <summary>Unique identifier of a business order for issuing MC (Уникальный идентификатор бизнес-заказа на эмиссию КМ)</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OrderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrderSummaryDto 
    {
        /// <summary>Array of buffer status information (Массив информации о статусе буферов)</summary>
        [Newtonsoft.Json.JsonProperty("buffers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BufferInfo> Buffers { get; set; }
    
        /// <summary>Order creation time (Время создания заказа)</summary>
        [Newtonsoft.Json.JsonProperty("createdTimestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CreatedTimestamp { get; set; }
    
        /// <summary>Order decline reason (Причина отклонения заказа)</summary>
        [Newtonsoft.Json.JsonProperty("declineReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeclineReason { get; set; }
    
        /// <summary>Unique OMS Order ID (Идентификатор бизнес-заказа)</summary>
        [Newtonsoft.Json.JsonProperty("orderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderId { get; set; }
    
        /// <summary>Business order status (Статус бизнес-заказа)</summary>
        [Newtonsoft.Json.JsonProperty("orderStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderSummaryDtoOrderStatus? OrderStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class OrdersSummaries 
    {
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
        /// <summary>An array of business orders with their statuses (Массив бизнес-заказов с их статусами)</summary>
        [Newtonsoft.Json.JsonProperty("orderInfos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OrderSummaryDto> OrderInfos { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PoolInfo 
    {
        /// <summary>Logical flag that shows if the Emission Registrar is currently ready for orders (Готовность РЭ)</summary>
        [Newtonsoft.Json.JsonProperty("isRegistrarReady", Required = Newtonsoft.Json.Required.Always)]
        public bool IsRegistrarReady { get; set; }
    
        /// <summary>Timestamp when the last Emission Registrar error occurred (Метка времени последней наблюдавшейся ошибки РЭ)</summary>
        [Newtonsoft.Json.JsonProperty("lastRegistrarErrorTimestamp", Required = Newtonsoft.Json.Required.Always)]
        public long LastRegistrarErrorTimestamp { get; set; }
    
        /// <summary>Number of unused ICs in the pool (Оставшеесе кол-во КМ в пуле)</summary>
        [Newtonsoft.Json.JsonProperty("leftInRegistrar", Required = Newtonsoft.Json.Required.Always)]
        public int LeftInRegistrar { get; set; }
    
        /// <summary>Number of ICs ordered in the array (Заказанное кол-во КМ в пуле)</summary>
        [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        /// <summary>Number of Emission Registrar errors occurred (Количество ошибок РЭ)</summary>
        [Newtonsoft.Json.JsonProperty("registrarErrorCount", Required = Newtonsoft.Json.Required.Always)]
        public int RegistrarErrorCount { get; set; }
    
        /// <summary>Emission Registrar Identifier (Номер РЭ)</summary>
        [Newtonsoft.Json.JsonProperty("registrarId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RegistrarId { get; set; }
    
        /// <summary>The IC array rejection reason returned by the Emission Registrar (Причина отказа)</summary>
        [Newtonsoft.Json.JsonProperty("rejectionReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RejectionReason { get; set; }
    
        /// <summary>IC array status (Статус пула)</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PoolInfoStatus Status { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductInfo 
    {
        [Newtonsoft.Json.JsonProperty("gtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gtin { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProvidersDto 
    {
        [Newtonsoft.Json.JsonProperty("providers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProvidersInfo> Providers { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProvidersInfo 
    {
        /// <summary>Site address (Адрес площадки)</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }
    
        /// <summary>Contact person (Контактное лицо)</summary>
        [Newtonsoft.Json.JsonProperty("contactPerson", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContactPerson { get; set; }
    
        /// <summary>Service provider country (Страна сервис провайдера)</summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }
    
        /// <summary>E-mail (Электронный адрес)</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }
    
        /// <summary>Contractor name (Наименование контрагента)</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }
    
        /// <summary>Contractor role (Service Provider Role)</summary>
        [Newtonsoft.Json.JsonProperty("productGroups", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProductGroups> ProductGroups { get; set; } = new System.Collections.ObjectModel.Collection<ProductGroups>();
    
        /// <summary>Service provider name (Наименование сервис-провайдера)</summary>
        [Newtonsoft.Json.JsonProperty("providerName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProviderName { get; set; }
    
        /// <summary>Service provider role (Роль сервис провайдера)</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Role { get; set; }
    
        /// <summary>Service Provider ID (Идентификатор сервис-провайдера)</summary>
        [Newtonsoft.Json.JsonProperty("serviceProviderId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ServiceProviderId { get; set; }
    
        /// <summary>Exporter ID (Идентификатор экспортера)</summary>
        [Newtonsoft.Json.JsonProperty("taxIdentificationNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TaxIdentificationNumber { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReceiptDto 
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("signature", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Signature { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReceiptsDto 
    {
        [Newtonsoft.Json.JsonProperty("receipts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ReceiptDto> Receipts { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReportResult 
    {
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
        /// <summary>Unique OMS Report ID (Уникальный идентификатор отчета в СУЗ)</summary>
        [Newtonsoft.Json.JsonProperty("reportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ReportStatusDto 
    {
        /// <summary>Причина отклонения отчета (обнаруженная ошибка)</summary>
        [Newtonsoft.Json.JsonProperty("errorReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorReason { get; set; }
    
        /// <summary>Уникальный идентификатор СУЗ</summary>
        [Newtonsoft.Json.JsonProperty("omsId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OmsId { get; set; }
    
        /// <summary>Report ID (Идентификатор отчета)</summary>
        [Newtonsoft.Json.JsonProperty("reportId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ReportId { get; set; }
    
        /// <summary>Report status (Статус отчета)</summary>
        [Newtonsoft.Json.JsonProperty("reportStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReportStatusDtoReportStatus ReportStatus { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoBeer 
    {
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoBeerUsageType UsageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoBicycle 
    {
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoBicycleUsageType UsageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoLight 
    {
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoLightUsageType UsageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoMilk 
    {
        /// <summary>Производственный ветеринарный сопроводительный документ</summary>
        [Newtonsoft.Json.JsonProperty("accompanyingDocument", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccompanyingDocument { get; set; }
    
        /// <summary>Capacity/Weight (Объем/Масса)</summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Capacity { get; set; }
    
        /// <summary>CIS type (Тип КМ)</summary>
        [Newtonsoft.Json.JsonProperty("cisType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoMilkCisType CisType { get; set; }
    
        /// <summary>Expiry date of the product (expiration date more than 72 hours) (Дата окончания срока годности продукции (срок хранения более 72 часов))</summary>
        [Newtonsoft.Json.JsonProperty("expDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpDate { get; set; }
    
        /// <summary>Expiry date of the product (expiration date more than 72 hours) (Дата окончания срока годности продукции (срок хранения менее 72 часов))</summary>
        [Newtonsoft.Json.JsonProperty("expDate72", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExpDate72 { get; set; }
    
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoMilkUsageType UsageType { get; set; }
    
        /// <summary>The indication of use of ICs in production (Признак использовании КМ на производстве)</summary>
        [Newtonsoft.Json.JsonProperty("usedInProduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsedInProduction { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoNcp 
    {
        /// <summary>Product Brand Name (Наименование бренда продукции)</summary>
        [Newtonsoft.Json.JsonProperty("brandcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brandcode { get; set; }
    
        /// <summary>Production date (Дата производства. Дата указывается с учетом часового пояса. Обозначение даты в соответствии с ГОСТ ИСО 8601–2001)</summary>
        [Newtonsoft.Json.JsonProperty("productionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionDate { get; set; }
    
        /// <summary>Production line number (Номер производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>The Id of the production order (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Utilisation report identifier of APCS (Идентификатор отчёта о нанесении АСУТП)</summary>
        [Newtonsoft.Json.JsonProperty("sourceReportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceReportId { get; set; }
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoNcpUsageType UsageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoOtp 
    {
        /// <summary>Наименование бренда продукции</summary>
        [Newtonsoft.Json.JsonProperty("brandcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brandcode { get; set; }
    
        /// <summary>Идентификатор производственной линии</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>Идентификатор производственного заказа</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Идентификатор отчёта о нанесении АСУТП</summary>
        [Newtonsoft.Json.JsonProperty("sourceReportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceReportId { get; set; }
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoOtpUsageType UsageType { get; set; }
    
        /// <summary>The indication of use of ICs in production (Признак использовании КМ на производстве)</summary>
        [Newtonsoft.Json.JsonProperty("usedInProduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsedInProduction { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoPharma 
    {
        /// <summary>The ID of the manufacturer who produced the quality control (36-значный идентификатор, присваиваемый иностранным контрагентам при их регистрации в ФГИС МДЛП держателем регистрационного удостоверения лекарственного препарата (или его представительством))</summary>
        [Newtonsoft.Json.JsonProperty("controlId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ControlId { get; set; }
    
        /// <summary>Identifier of the location of goods in the customs control zone (36-значный идентификатор местонахождения товара из реестра мест в зоне таможенного контроля в ФГИС МДЛП)</summary>
        [Newtonsoft.Json.JsonProperty("customsReceiverId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomsReceiverId { get; set; }
    
        /// <summary>Expiration Data (Дата истечения срока годности)</summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExpirationDate { get; set; }
    
        /// <summary>Order Type (Тип заказа)</summary>
        [Newtonsoft.Json.JsonProperty("orderType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OrderType { get; set; }
    
        /// <summary>Owner Identifier (Идентификатор владельца)</summary>
        [Newtonsoft.Json.JsonProperty("ownerId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OwnerId { get; set; }
    
        /// <summary>The ID of the packaging manufacturer (Идентификатор производителя, осуществившего упаковку/фасовку во вторичную (а при ее отсутствии – первичную упаковку)</summary>
        [Newtonsoft.Json.JsonProperty("packingId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PackingId { get; set; }
    
        /// <summary>Production dates (Дата производства)</summary>
        [Newtonsoft.Json.JsonProperty("productionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionDate { get; set; }
    
        /// <summary>Series Number (Номер производственной серии)</summary>
        [Newtonsoft.Json.JsonProperty("seriesNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SeriesNumber { get; set; }
    
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Subject ID (Субъект обращения (Идентификатор места деятельности)</summary>
        [Newtonsoft.Json.JsonProperty("subjectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubjectId { get; set; }
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoPharmaUsageType UsageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoTobacco 
    {
        /// <summary>Product Brand Name (Наименование бренда продукции)</summary>
        [Newtonsoft.Json.JsonProperty("brandcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brandcode { get; set; }
    
        /// <summary>Production date (Дата производства. Дата указывается с учетом часового пояса. Обозначение даты в соответствии с ГОСТ ИСО 8601–2001)</summary>
        [Newtonsoft.Json.JsonProperty("productionDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionDate { get; set; }
    
        /// <summary>Production line number (Номер производственной линии)</summary>
        [Newtonsoft.Json.JsonProperty("productionLineId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProductionLineId { get; set; }
    
        /// <summary>The Id of the production order (Идентификатор производственного заказа)</summary>
        [Newtonsoft.Json.JsonProperty("productionOrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductionOrderId { get; set; }
    
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Utilisation report identifier of APCS (Идентификатор отчёта о нанесении АСУТП)</summary>
        [Newtonsoft.Json.JsonProperty("sourceReportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceReportId { get; set; }
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoTobaccoUsageType UsageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoWater 
    {
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoWaterUsageType UsageType { get; set; }
    
        /// <summary>The indication of use of ICs in production (Признак использовании КМ на производстве)</summary>
        [Newtonsoft.Json.JsonProperty("usedInProduction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? UsedInProduction { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UtilisationReportDtoWheelchairs 
    {
        /// <summary>List of Utilized Identification Codes (Информация об использованных КМ)</summary>
        [Newtonsoft.Json.JsonProperty("sntins", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Sntins { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Usage type (Тип использования)</summary>
        [Newtonsoft.Json.JsonProperty("usageType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UtilisationReportDtoWheelchairsUsageType UsageType { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AggregationUnitAggregationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AGGREGATION")]
        AGGREGATION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPDATE")]
        UPDATE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BufferInfoBufferStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXHAUSTED")]
        EXHAUSTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DropoutReportDtoBeerDropoutReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DEFECT")]
        DEFECT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRY")]
        EXPIRY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QA_SAMPLES")]
        QA_SAMPLES = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_RECALL")]
        PRODUCT_RECALL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINTS")]
        COMPLAINTS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_TESTING")]
        PRODUCT_TESTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEMO_SAMPLES")]
        DEMO_SAMPLES = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGE_LOSS")]
        DAMAGE_LOSS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESTRUCTION")]
        DESTRUCTION = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATION")]
        LIQUIDATION = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONFISCATION")]
        CONFISCATION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DropoutReportDtoMilkDropoutReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DEFECT")]
        DEFECT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRY")]
        EXPIRY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QA_SAMPLES")]
        QA_SAMPLES = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_RECALL")]
        PRODUCT_RECALL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINTS")]
        COMPLAINTS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_TESTING")]
        PRODUCT_TESTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEMO_SAMPLES")]
        DEMO_SAMPLES = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGE_LOSS")]
        DAMAGE_LOSS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESTRUCTION")]
        DESTRUCTION = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATION")]
        LIQUIDATION = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONFISCATION")]
        CONFISCATION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DropoutReportDtoNcpDropoutReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DEFECT")]
        DEFECT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRY")]
        EXPIRY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QA_SAMPLES")]
        QA_SAMPLES = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_RECALL")]
        PRODUCT_RECALL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINTS")]
        COMPLAINTS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_TESTING")]
        PRODUCT_TESTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEMO_SAMPLES")]
        DEMO_SAMPLES = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGE_LOSS")]
        DAMAGE_LOSS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESTRUCTION")]
        DESTRUCTION = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATION")]
        LIQUIDATION = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONFISCATION")]
        CONFISCATION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DropoutReportDtoTobaccoDropoutReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DEFECT")]
        DEFECT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRY")]
        EXPIRY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QA_SAMPLES")]
        QA_SAMPLES = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_RECALL")]
        PRODUCT_RECALL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINTS")]
        COMPLAINTS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_TESTING")]
        PRODUCT_TESTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEMO_SAMPLES")]
        DEMO_SAMPLES = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGE_LOSS")]
        DAMAGE_LOSS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESTRUCTION")]
        DESTRUCTION = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATION")]
        LIQUIDATION = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONFISCATION")]
        CONFISCATION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DropoutReportDtoWaterDropoutReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DEFECT")]
        DEFECT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRY")]
        EXPIRY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"QA_SAMPLES")]
        QA_SAMPLES = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_RECALL")]
        PRODUCT_RECALL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMPLAINTS")]
        COMPLAINTS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_TESTING")]
        PRODUCT_TESTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DEMO_SAMPLES")]
        DEMO_SAMPLES = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGE_LOSS")]
        DAMAGE_LOSS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESTRUCTION")]
        DESTRUCTION = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIQUIDATION")]
        LIQUIDATION = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONFISCATION")]
        CONFISCATION = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoBeerCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoBeerReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoBicycleCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoBicycleReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoLightCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoLightReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoLpCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoLpReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoMilkCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoMilkReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoNcpReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoOtpCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoOtpReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoPerfumCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoPerfumReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoPharmaPaymentType
    {
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoPhotoCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoPhotoReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoShoesCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoShoesReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoTiresCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoTiresReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoWaterCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoWaterReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoWheelchairsCreateMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CEM")]
        CEM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CM")]
        CM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CL")]
        CL = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CA")]
        CA = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderDtoWheelchairsReleaseMethodType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCTION")]
        PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMPORT")]
        IMPORT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMAINS")]
        REMAINS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CROSSBORDER")]
        CROSSBORDER = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REMARK")]
        REMARK = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"COMMISSION")]
        COMMISSION = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductBeerCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductBeerSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductBicycleSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductFashionCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductFashionSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductMilkCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductMilkSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductNcpSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductOtpCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductOtpSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductPerfumCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductPerfumSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductPharmaSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductPhotoCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductPhotoSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductTiresSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductTobaccoSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductWaterCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductWaterSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderProductWheelchairsSerialNumberType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_MADE")]
        SELF_MADE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OPERATOR")]
        OPERATOR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderSummaryDtoOrderStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DECLINED")]
        DECLINED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"APPROVED")]
        APPROVED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"READY")]
        READY = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXPIRED")]
        EXPIRED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PoolInfoStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ER_NOT_AVAILABLE")]
        ER_NOT_AVAILABLE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUEST_ERROR")]
        REQUEST_ERROR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUESTED")]
        REQUESTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROCESS")]
        IN_PROCESS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"READY")]
        READY = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ProductGroups
    {
        [System.Runtime.Serialization.EnumMember(Value = @"lp")]
        Lp = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"shoes")]
        Shoes = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tobacco")]
        Tobacco = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"perfumery")]
        Perfumery = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"tires")]
        Tires = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"electronics")]
        Electronics = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"pharma")]
        Pharma = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"milk")]
        Milk = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"bicycle")]
        Bicycle = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"wheelchairs")]
        Wheelchairs = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"otp")]
        Otp = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"water")]
        Water = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"beer")]
        Beer = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ncp")]
        Ncp = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReportStatusDtoReportStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"DRAFT")]
        DRAFT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING")]
        PENDING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHECK")]
        CHECK = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"READY_TO_SEND")]
        READY_TO_SEND = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT")]
        SENT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED")]
        PROCESSED = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoBeerUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoBicycleUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoLightUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoMilkCisType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UNIT")]
        UNIT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BUNDLE")]
        BUNDLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SET")]
        SET = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GROUP")]
        GROUP = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoMilkUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoNcpUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoOtpUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoPharmaUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoTobaccoUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoWaterUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.4.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UtilisationReportDtoWheelchairsUsageType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"USED_FOR_PRODUCTION")]
        USED_FOR_PRODUCTION = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SENT_TO_PRINTER")]
        SENT_TO_PRINTER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTED")]
        PRINTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRINTER_LOST")]
        PRINTER_LOST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERIFIED")]
        VERIFIED = 4,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FairMarkException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public FairMarkException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FairMarkException<TResult> : FairMarkException
    {
        public TResult Result { get; private set; }

        public FairMarkException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108